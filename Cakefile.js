// Generated by CoffeeScript 1.4.0
var build, compile, exec, minimize, spawn, watch, _ref,
  __slice = [].slice;

_ref = require('child_process'), exec = _ref.exec, spawn = _ref.spawn;

task('assets:watch', 'Watch source files and build JS & CSS', function(options) {
  return watch('coffee', '-wc', '.');
});

task('compile', 'Compile .coffee files from directory .js', function(options) {
  return compile();
});

task('build', 'Build pubsub js files. Builds one js file for development and one minimized', function() {
  return build(minimize);
});

watch = function() {
  var args, name, proc;
  name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  proc = spawn(name, args);
  proc.stderr.on('data', function(buffer) {
    return console.log(buffer.toString());
  });
  proc.stdout.on('data', function(buffer) {
    return console.log(buffer.toString());
  });
  return proc.on('exit', function(status) {
    if (status) {
      return process.exit(1);
    }
  });
};

compile = function(from, to, callback) {
  if (from == null) {
    from = '.';
  }
  if (to == null) {
    to = '.';
  }
  return exec("coffee -o " + from + " -c " + to, function(err, stdout, stderr) {
    if (err) {
      throw err;
    }
    console.log("Compiled coffee files");
    return typeof callback === "function" ? callback() : void 0;
  });
};

build = function(callback) {
  return exec("coffee -c -o . ./src", function(err, stdout, stderr) {
    if (err) {
      throw error;
    }
    console.log("PubSub Built");
    return typeof callback === "function" ? callback() : void 0;
  });
};

minimize = function() {
  var dev, min, pack, version;
  pack = require("./package.json");
  version = pack.version;
  dev = "pubsub.js";
  min = "pubsub-" + version + ".min.js";
  return exec("uglifyjs " + dev + " -o " + min, function(err, stdout, stderr) {
    if (err) {
      throw err;
    }
    exec("mv " + dev + " pubsub-" + version + ".js");
    return console.log("PubSub minified");
  });
};
