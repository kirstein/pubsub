// Generated by CoffeeScript 1.4.0
(function() {
  var PubSub, assert, libpath, should,
    __hasProp = {}.hasOwnProperty;

  libpath = process.env.COVERAGE ? "../src-cov" : "../src";

  PubSub = require("" + libpath + "/pubsub");

  should = require("should");

  assert = require("assert");

  describe("PubSub", function() {
    it("should exist", function() {
      return PubSub.should.be.defined;
    });
    describe("#unsubscribe", function() {
      it("should link #off to #unsubscribe", function() {
        return PubSub.prototype.off.should.be.equal(PubSub.prototype.unsubscribe);
      });
      it("should clear the state of pubsub when no arguments are given to unsubscribe", function() {
        var event, event2, pubsub;
        pubsub = new PubSub();
        event = "i.like.turtles";
        event2 = "hoooleeyyyshiiiett";
        pubsub.subscribe(event, function() {});
        pubsub.subscribe(event2, function() {});
        pubsub._pubsub[event].should.be.instanceOf(Array)["with"].lengthOf(1);
        pubsub._pubsub[event2].should.be.instanceOf(Array)["with"].lengthOf(1);
        pubsub.unsubscribe();
        assert(typeof pubsub._pubsub[event] === 'undefined');
        return assert(typeof pubsub._pubsub[event2] === 'undefined');
      });
      it("should remove all callbacks with given event from list if no callback is given", function() {
        var callb, event, event2, pubsub;
        pubsub = new PubSub();
        event = "test.event";
        event2 = "test.event.2";
        callb = function() {};
        pubsub.subscribe(event, callb);
        pubsub.subscribe(event2, callb);
        pubsub._pubsub[event].should.be.instanceOf(Array)["with"].lengthOf(1);
        pubsub.unsubscribe(event);
        assert(typeof pubsub._pubsub[event] === 'undefined');
        return pubsub._pubsub[event2].should.be.instanceOf(Array)["with"].lengthOf(1);
      });
      it("should remove only the given callback from list", function() {
        var callback, callbacks, event, i, pubsub;
        pubsub = new PubSub();
        event = "test?event";
        callbacks = {};
        callbacks.one = function() {
          return 'function one';
        };
        callbacks.two = function() {
          return 'function two';
        };
        callbacks.six = function() {
          return 'function six';
        };
        for (i in callbacks) {
          if (!__hasProp.call(callbacks, i)) continue;
          callback = callbacks[i];
          pubsub.subscribe(event, callback);
        }
        pubsub.unsubscribe(event, callbacks.two);
        pubsub._pubsub[event].should.be.instanceOf(Array)["with"].lengthOf(2);
        return pubsub._pubsub[event].should.include(callbacks.one, callbacks.six);
      });
      return it("should remove object with context change from list", function() {
        var callback, callbacks, event, i, pubsub;
        pubsub = new PubSub();
        event = "test?event";
        callbacks = {};
        callbacks.one = function() {
          return 'function one';
        };
        callbacks.two = function() {
          return 'function two';
        };
        callbacks.six = function() {
          return 'function six';
        };
        for (i in callbacks) {
          if (!__hasProp.call(callbacks, i)) continue;
          callback = callbacks[i];
          pubsub.subscribe(event, callback);
        }
        pubsub.unsubscribe(event, callbacks.two);
        pubsub._pubsub[event].should.be.instanceOf(Array)["with"].lengthOf(2);
        return pubsub._pubsub[event].should.include(callbacks.one, callbacks.six);
      });
    });
    describe("#subscribe", function() {
      it("should link #on to #subscribe", function() {
        return PubSub.prototype.on.should.be.equal(PubSub.prototype.subscribe);
      });
      it("should throw when no callback is defined", function() {
        var pubsub;
        pubsub = new PubSub();
        return (function() {
          return pubsub.subscribe('test');
        }).should["throw"]("No callback defined");
      });
      it("should throw when no event is defined", function() {
        var pubsub;
        pubsub = new PubSub();
        return (function() {
          return pubsub.subscribe(void 0, function() {});
        }).should["throw"]("No event defined");
      });
      it("should subscribe to pubsub", function() {
        var callb, event, pubsub;
        pubsub = new PubSub();
        event = "test.event";
        callb = function() {};
        pubsub.subscribe(event, callb);
        pubsub._pubsub[event].should.be.instanceOf(Array)["with"].lengthOf(1);
        return pubsub._pubsub[event][0].should.equal(callb);
      });
      return it("should subscribe to pubsub with context", function(done) {
        var callb, event, pubsub, testObj;
        pubsub = new PubSub();
        event = "test...event";
        testObj = {
          'foo': 'bar'
        };
        callb = function(one, two) {
          this.foo.should.equal('bar');
          one.should.equal('one');
          two.should.equal('two');
          return done();
        };
        pubsub.subscribe(event, callb, testObj);
        return pubsub.publish(event, 'one', 'two');
      });
    });
    return describe("#publish", function() {
      it("should link #trigger to #publish", function() {
        return PubSub.prototype.trigger.should.be.equal(PubSub.prototype.publish);
      });
      it("should throw when no event is defined", function() {
        var pubsub;
        pubsub = new PubSub();
        return (function() {
          return pubsub.publish(void 0);
        }).should["throw"]("No event defined");
      });
      it("should publish events", function(done) {
        var callb, event, pubsub;
        pubsub = new PubSub();
        event = "random..event";
        callb = function(arg) {
          arg.should.equal('test');
          return done();
        };
        pubsub.subscribe(event, callb);
        return pubsub.publish(event, 'test');
      });
      return it("should publish between multiple receivers", function(done) {
        var callbacks, event, fn, i, inc, maxCallbacks, pubsub, _i, _ref;
        pubsub = new PubSub();
        event = "this.is.sparta";
        callbacks = 0;
        maxCallbacks = 12;
        inc = function() {
          callbacks++;
          if (callbacks === maxCallbacks) {
            return done();
          }
        };
        for (i = _i = 0, _ref = maxCallbacks - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          fn = function(what) {
            what.should.equal('sparta');
            return inc();
          };
          pubsub.subscribe(event, fn);
        }
        return pubsub.publish(event, 'sparta');
      });
    });
  });

}).call(this);
